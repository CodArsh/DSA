#include<iostream>
using namespace std;
#define INVALID_QUEUE_STATE 1
#define OVERFLOW 2
#define UNDERFLOW 3
class QueueArray {
  private:
    int capacity;
    int front,rear;
    int *ptr;
  public:
    QueueArray(int); // constructor
    ~QueueArray(); // destructor
    QueueArray(QueueArray&); // copy constructor
    QueueArray& operator=(QueueArray&); // copy assignment operator
    void insert(int);
    bool isFull();
    bool isEmpty();
    int getFront();
    int getRear();
    void remove();
    int count();
    void display();
};
QueueArray::QueueArray(int cap) {
    capacity = cap;
    front = -1;
    rear = -1;
    if(cap>0)
        ptr = new int[cap];
    else
        ptr = NULL;
}
void QueueArray::insert(int data) {
    if(capacity<=0)
        throw INVALID_QUEUE_STATE;
    if(isFull())
        throw OVERFLOW;
    if(rear==-1) { // when Queue is empty & insert 1st value
        rear=front=0;
        ptr[rear]=data;
    } else if(rear == capacity-1) { // rear go to 0 index
        rear=0;
        ptr[rear]=data;
    } else { // normally increment in rear
        rear++;
        ptr[rear]=data;
    }
}
void QueueArray::remove() {
    if(isEmpty())
        throw UNDERFLOW;
    if(front==rear)
        front=rear=-1;
    else if(front==capacity-1)
        front=0;
    else
        front++;
}
bool QueueArray::isFull() {
    return (front==0 && rear==capacity-1 || rear+1==front);
}
bool QueueArray::isEmpty() {
    return rear==-1; // we can also check front==-1 both conditions are same if one consider -1 then other always -1
}
int QueueArray::getFront() {
    if(!isEmpty())
        return ptr[front];
    else
        throw UNDERFLOW;
}
int QueueArray::getRear() {
    if(!isEmpty())
        return ptr[rear];
    else
        throw UNDERFLOW;
}
QueueArray::~QueueArray() {
    delete []ptr;
}
int QueueArray::count() {
    if(front==-1)
        return 0;
    if(front==rear)
        return 1;
    else if(rear>front)
        return rear-front+1;
    else
        return capacity-(front+rear+1);
}
QueueArray::QueueArray(QueueArray &q) {
    capacity = q.capacity;
    front = q.front;
    rear = q.rear;
    ptr = new int[capacity];
    for(int i=0; i<capacity; i++) {
        ptr[i] = q.ptr[i];
    }
}
void QueueArray::display() {
    if(isEmpty()) {
        cout << "Queue is empty" << endl;
        return;
    }
    int i = front;
    cout<<endl<<"------ QUEUE ------"<<endl;
    while (true) {
        cout << ptr[i] <<endl;
        if(i == rear)
            break;
        if(i == capacity-1)
            i = 0;
        else
            i++;
    }
    cout << endl;
}

int main() {
    QueueArray q1(5);
    q1.insert(51);
    q1.insert(50);
    q1.insert(59);
    q1.insert(52);
    q1.insert(56);
    q1.remove();
    q1.remove();
    q1.display();
    cout<<endl<<"FRONT : "<<q1.getFront()<<endl;
    cout<<endl<<"COUNT : "<<q1.count()<<endl;
    cout<<endl<<"REAR : "<<q1.getRear()<<endl;
}
