#include <iostream>

using namespace std;

struct node {
    node *prev;
    int item;
    node *next;
};
class DLL {
  public:
    node *start;
  public:
    DLL();

    // insertion
    void insertAtStart(int);
    void insertAtLast(int);
    void insertAfter(int, int);

    // deletion
    void deleteFirst();
    void deleteLast();
    void deleteAfter(int);

    void display();
};
DLL::DLL() {
    start = NULL;
}
void DLL::insertAtStart(int nodeValue) {
    node *n = new node;
    n->item = nodeValue;
    n->next = start;
    start = n;
    n->prev = NULL;
}

void DLL::insertAtLast(int nodeValue) {
    node *n = new node;
    node *p = new node;
    n->item = nodeValue;
    p = start;
    if(start != NULL) {
        while(p->next != NULL) {
            p = p->next;
        }
        n->prev = p;
        p->next = n;
        n->next = NULL;
    } else {
        start = n;
    }
}

void DLL::insertAfter(int check, int item) {
    node *n = new node;
    node *found = new node;
    node *pr = new node;
    found = start;
    try {
        while(found != NULL) {
            if(found->item == check)
                throw 1;
            found = found->next;
        }
        throw 0;
    } catch(int e) {
        if(e==1) {
            pr = found->next->next;
            n->next = found->next;
            found->next = n;
            pr->prev = n;
            n->item = item;
        } else cout<<"Oops ! "<<check<<" Not Found in list"<<endl;
    }
}

void DLL::deleteFirst() {
    node *n = new node;
    n = start;
    if(start == NULL) {
        cout<<"List is empty !";
    } else if(start->next == NULL) {
        start = NULL;
        delete n;
    } else {
        start = start->next;
        delete n;
    }
}

void DLL::deleteLast() {
    node *n = new node;
    node *preValue = new node;
    n = start;
    if(start == NULL)
        cout<<"List is empty !";
    else if(start->next == NULL) {
        start = NULL;
        delete n;
    } else {
        while(n->next != NULL) {
            preValue = n;
            n = n->next;
        }
        preValue->next = NULL;
        delete n;
    }
}

void DLL::deleteAfter(int check) {
    node *n = new node;
    node *x = new node;
    node *found = new node;
    node *pr = new node;
    found = start;
    try {
        while(found != NULL) {
            if(found->item == check)
                throw 1;
            found = found->next;
        }
        throw 0;
    } catch(int e) {
        if(e==1) {
            x = found->next;
            if(found->next != NULL) {
                if(x->next != NULL) {
                    pr = x->next;
                    found->next = pr;
                    pr->prev = found->next;
                    delete x;
                } else {
                    found->next = NULL;
                    delete x;
                }
            }
            else cout<<"This is ("<<check<<") last node !"<<endl<<endl;
        } else cout<<"Oops ! "<<check<<" Not Found in list"<<endl;
    }

}
void DLL::display() {
    while(start != NULL) {
        if(start->next != NULL)
            cout<<start->item<<" => ";
        else cout<<start->item;
        start = start->next;
    }
}

int main() {
    DLL d1;
    d1.insertAtStart(12);
    d1.insertAtLast(63);
    d1.insertAtLast(19);
    d1.insertAtStart(2);
    d1.insertAtStart(14);
    d1.insertAtLast(100);
    d1.insertAfter(12, 20);
    d1.deleteFirst();
    d1.deleteLast();
    d1.deleteLast();
    d1.deleteAfter(12);
    d1.display();
    return 0;
}
