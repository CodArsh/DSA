#include <iostream>

using namespace std;
class Array {
private:
  int lastIndex = -1;
  int capacity;
  int *ptr = NULL;

public:
  void createArray(int);
  void insertData(int, int);
  bool isFull();
  void doubleArray(int, int);
  void deleteIndex(int);
  void halfArray(int);
};
void Array::createArray(int sizeOfArray) {
  if (this->ptr != NULL) {
    delete[] ptr; // old pointer deleted
  }
  this->ptr = new int[sizeOfArray]; // create array with new size
  this->capacity = sizeOfArray;
}
void Array::insertData(int index, int data) {
  if (!isFull()) {
    if (index > this->capacity - 1) {
      doubleArray(index, data);
    } else {
      *(ptr + index) = data;
      lastIndex++;
    }
  } else {
    doubleArray(index, data);
  }
}
bool Array::isFull() {
  if (this->lastIndex == this->capacity - 1)
    return true;
  else
    return false;
}
void Array::doubleArray(int index, int data) {
  int temp = data;
  int *newArr = new int[this->capacity * 2];
  this->capacity = this->capacity * 2;
  lastIndex++;
  for (int i = 0; i < this->capacity; i++) {
    *(newArr + i) = *(ptr + i);
  }
  *(newArr + index) = temp;
  delete[] ptr;
  this->ptr = newArr;
}
void Array::deleteIndex(int index) {
  int start = index;
  for (int i = start; i < this->capacity; i++) {
    *(this->ptr + i) = *(this->ptr + (i + 1));
  }
  this->lastIndex--;
  if (this->lastIndex + 1 <= this->capacity / 2) {
    halfArray(this->capacity / 2);
  }
}
void Array::halfArray(int halfSize) {
  int *temp = new int[halfSize];
  this->capacity = halfSize;
  for (int i = 0; i < halfSize; i++) {
    *(temp + i) = *(this->ptr + i);
  }
  delete[] ptr;
  ptr = temp;
}
int main() {
  Array a1;
  a1.createArray(5);
  a1.insertData(0, 11);
  a1.insertData(1, 22);
  a1.insertData(2, 33);
  a1.insertData(3, 44);
  a1.insertData(4, 55);
  a1.insertData(5, 66);
  a1.insertData(6, 88);
  a1.insertData(7, 99);
  a1.deleteIndex(0);
  a1.deleteIndex(1);
  a1.deleteIndex(4);
  a1.isFull();
  cin.get();
  return 0;
}
